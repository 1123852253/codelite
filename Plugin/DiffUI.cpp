//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: DiffUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "DiffUI.h"

// Declare the bitmap loading function
extern void wxCrafterIlcShpInitBitmapResources();

static bool bBitmapLoaded = false;

DiffFoldersBaseFrame::DiffFoldersBaseFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos,
                                           const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterIlcShpInitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);

    m_panel4 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer2->Add(m_panel4, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer6 = new wxBoxSizer(wxVERTICAL);
    m_panel4->SetSizer(boxSizer6);

    m_splitter = new wxSplitterWindow(m_panel4, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel4, wxSize(-1, -1)),
                                      wxSP_LIVE_UPDATE | wxSP_3DSASH);
    m_splitter->SetSashGravity(0.5);
    m_splitter->SetMinimumPaneSize(10);

    boxSizer6->Add(m_splitter, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_splitterPage12 =
        new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    wxBoxSizer* boxSizer18 = new wxBoxSizer(wxVERTICAL);
    m_splitterPage12->SetSizer(boxSizer18);

    m_treeCtrlLeft = new clThemedTreeCtrl(m_splitterPage12, wxID_ANY, wxDefaultPosition,
                                          wxDLG_UNIT(m_splitterPage12, wxSize(-1, -1)), wxTR_DEFAULT_STYLE);

    boxSizer18->Add(m_treeCtrlLeft, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_splitterPage16 =
        new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_splitter->SplitVertically(m_splitterPage12, m_splitterPage16, 0);

    wxBoxSizer* boxSizer20 = new wxBoxSizer(wxVERTICAL);
    m_splitterPage16->SetSizer(boxSizer20);

    m_treeCtrlRight = new clThemedTreeCtrl(m_splitterPage16, wxID_ANY, wxDefaultPosition,
                                           wxDLG_UNIT(m_splitterPage16, wxSize(-1, -1)), wxTR_DEFAULT_STYLE);

    boxSizer20->Add(m_treeCtrlRight, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_menuBar26 = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar26);

    m_menuFile = new wxMenu();
    m_menuBar26->Append(m_menuFile, _("&File"));

    m_menuItemNewComparison = new wxMenuItem(m_menuFile, wxID_NEW, _("New Comparison"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemNewComparison);

    m_menuFile->AppendSeparator();

    m_menuItemClose = new wxMenuItem(m_menuFile, wxID_CLOSE, _("&Close"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemClose);

    SetName(wxT("DiffFoldersBaseFrame"));
    SetSize(wxDLG_UNIT(this, wxSize(800, 600)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_treeCtrlLeft->Connect(wxEVT_COMMAND_TREE_ITEM_EXPANDING,
                            wxTreeEventHandler(DiffFoldersBaseFrame::OnLeftFolderExpanding), NULL, this);
    m_treeCtrlLeft->Connect(wxEVT_COMMAND_TREE_SEL_CHANGED,
                            wxTreeEventHandler(DiffFoldersBaseFrame::OnLeftSelectionChanged), NULL, this);
    m_treeCtrlLeft->Connect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                            wxTreeEventHandler(DiffFoldersBaseFrame::OnLeftItemActivated), NULL, this);
    m_treeCtrlRight->Connect(wxEVT_COMMAND_TREE_ITEM_EXPANDING,
                             wxTreeEventHandler(DiffFoldersBaseFrame::OnRightFolderExpanding), NULL, this);
    m_treeCtrlRight->Connect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                             wxTreeEventHandler(DiffFoldersBaseFrame::OnRightItemActivated), NULL, this);
    m_treeCtrlRight->Connect(wxEVT_COMMAND_TREE_SEL_CHANGED,
                             wxTreeEventHandler(DiffFoldersBaseFrame::OnRightSelectionChanged), NULL, this);
    this->Connect(m_menuItemNewComparison->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(DiffFoldersBaseFrame::OnNewCmparison), NULL, this);
    this->Connect(m_menuItemClose->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(DiffFoldersBaseFrame::OnClose), NULL, this);
}

DiffFoldersBaseFrame::~DiffFoldersBaseFrame()
{
    m_treeCtrlLeft->Disconnect(wxEVT_COMMAND_TREE_ITEM_EXPANDING,
                               wxTreeEventHandler(DiffFoldersBaseFrame::OnLeftFolderExpanding), NULL, this);
    m_treeCtrlLeft->Disconnect(wxEVT_COMMAND_TREE_SEL_CHANGED,
                               wxTreeEventHandler(DiffFoldersBaseFrame::OnLeftSelectionChanged), NULL, this);
    m_treeCtrlLeft->Disconnect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                               wxTreeEventHandler(DiffFoldersBaseFrame::OnLeftItemActivated), NULL, this);
    m_treeCtrlRight->Disconnect(wxEVT_COMMAND_TREE_ITEM_EXPANDING,
                                wxTreeEventHandler(DiffFoldersBaseFrame::OnRightFolderExpanding), NULL, this);
    m_treeCtrlRight->Disconnect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                                wxTreeEventHandler(DiffFoldersBaseFrame::OnRightItemActivated), NULL, this);
    m_treeCtrlRight->Disconnect(wxEVT_COMMAND_TREE_SEL_CHANGED,
                                wxTreeEventHandler(DiffFoldersBaseFrame::OnRightSelectionChanged), NULL, this);
    this->Disconnect(m_menuItemNewComparison->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(DiffFoldersBaseFrame::OnNewCmparison), NULL, this);
    this->Disconnect(m_menuItemClose->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(DiffFoldersBaseFrame::OnClose), NULL, this);
}

DiffSelectFoldersBaseDlg::DiffSelectFoldersBaseDlg(wxWindow* parent, wxWindowID id, const wxString& title,
                                                   const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterIlcShpInitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer38 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer38);

    m_panel46 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer38->Add(m_panel46, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer48 = new wxBoxSizer(wxVERTICAL);
    m_panel46->SetSizer(boxSizer48);

    m_staticText54 = new wxStaticText(m_panel46, wxID_ANY, _("Select folders for comparison:"), wxDefaultPosition,
                                      wxDLG_UNIT(m_panel46, wxSize(-1, -1)), 0);

    boxSizer48->Add(m_staticText54, 0, wxALL, WXC_FROM_DIP(5));

    m_dirPickerLeft = new wxDirPickerCtrl(m_panel46, wxID_ANY, wxEmptyString, _("Select a folder"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panel46, wxSize(-1, -1)),
                                          wxDIRP_SMALL | wxDIRP_DEFAULT_STYLE | wxDIRP_USE_TEXTCTRL);

    boxSizer48->Add(m_dirPickerLeft, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_dirPickerRight = new wxDirPickerCtrl(m_panel46, wxID_ANY, wxEmptyString, _("Select a folder"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panel46, wxSize(-1, -1)),
                                           wxDIRP_SMALL | wxDIRP_DEFAULT_STYLE | wxDIRP_USE_TEXTCTRL);

    boxSizer48->Add(m_dirPickerRight, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_stdBtnSizer40 = new wxStdDialogButtonSizer();

    boxSizer38->Add(m_stdBtnSizer40, 0, wxALL | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOK->SetDefault();
    m_stdBtnSizer40->AddButton(m_buttonOK);

    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer40->AddButton(m_buttonCancel);
    m_stdBtnSizer40->Realize();

    SetName(wxT("DiffSelectFoldersBaseDlg"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(DiffSelectFoldersBaseDlg::OnOKUI), NULL, this);
}

DiffSelectFoldersBaseDlg::~DiffSelectFoldersBaseDlg()
{
    m_buttonOK->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(DiffSelectFoldersBaseDlg::OnOKUI), NULL, this);
}
